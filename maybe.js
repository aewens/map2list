// Generated by CoffeeScript 1.7.1
(function() {
  var M, ML, id,
    __slice = [].slice;

  id = function(x) {
    return x;
  };

  M = function() {
    var x, xs;
    xs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (xs.length > 1) {
      return new ML(xs);
    } else {
      x = xs[0];
      if (x === null || x === void 0 || x.length <= 0 || x === false || x === "") {
        return M.None();
      } else {
        if (x instanceof M) {
          return x;
        } else {
          return M.Some(x);
        }
      }
    }
  };

  M.error = "I'm sorry Dave, I'm afraid I can't do that";

  M.Some = function(x) {
    return new M.fn.init(true, x);
  };

  M.None = function() {
    return new M.fn.init(false, null);
  };

  M.fn = M.prototype = {
    init: function(usable, x) {
      this.usable = usable;
      if (x === null && usable) {
        throw this.error;
      }
      this.x = x;
      return this;
    },
    maybe: function(x) {
      return new M(x);
    },
    of: function(x) {
      return M(x);
    },
    orSome: function(x) {
      if (this.usable) {
        return this.x;
      } else {
        return x;
      }
    },
    orElse: function(x) {
      if (this.usable) {
        return this;
      } else {
        return x;
      }
    },
    otherwise: function(x) {
      return this.orSome(x);
    },
    elser: function(x) {
      return this.orElse(x);
    },
    bool: function(x) {
      if (this.usable) {
        return true;
      } else {
        return false;
      }
    },
    choose: function(x, y) {
      if (this.x) {
        return x;
      } else {
        return y;
      }
    },
    swap: function(x, y) {
      return this.x = this.x ? x : y;
    },
    bind: function(fn) {
      if (this.usable) {
        return fn(this.x);
      } else {
        return this;
      }
    },
    lift: function(fn) {
      if (this.usable) {
        return new M(fn(this.x));
      } else {
        return new M(this);
      }
    },
    bind2: function(y) {
      var self;
      self = this;
      return function(fn) {
        return fn(self.x, y);
      };
    },
    lift2: function(y) {
      var self;
      self = this;
      return function(fn) {
        return new M(fn(self.x, y.x));
      };
    },
    fmap: function(fn) {
      var self;
      self = this;
      return function() {
        var ms;
        ms = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return [self].concat(ms).reduce(function(a, b) {
          return new M(fn(a.x, b.x));
        });
      };
    },
    some: function() {
      if (this.usable) {
        return this.x;
      } else {
        throw M.error;
      }
    },
    isSome: function() {
      return this.usable;
    },
    isNone: function() {
      return !this.isSome();
    },
    toString: function() {
      if (this.usable) {
        return "Some(" + this.x + ")";
      } else {
        return "None";
      }
    },
    to_s: function() {
      return this.toString();
    },
    show: function() {
      return this.some();
    }
  };

  M.fn.init.prototype = M.fn;

  ML = function(xs) {
    if (xs instanceof ML) {
      return xs;
    } else {
      if (xs instanceof Array) {
        this.xs = xs.map(function(x) {
          return M(x);
        });
      } else {
        this.xs = [M(xs)];
      }
      return this;
    }
  };

  ML.fn = ML.prototype;

  ML.fn.all = function() {
    var l0, l1;
    l0 = this.xs.length;
    l1 = this.xs.filter(function(x) {
      return x.isSome();
    }).length;
    if (l0 === l1) {
      return true;
    } else {
      return false;
    }
  };

  ML.fn.any = function() {
    if (this.xs.filter(function(x) {
      return x.isSome();
    }).length > 0) {
      return true;
    } else {
      return false;
    }
  };

  ML.fn.unwrap = function() {
    return this.xs.map(function(x) {
      return x.x;
    });
  };

  ML.fn.bind = function(f) {
    return this.xs.map(function(x) {
      return x.bind(f);
    });
  };

  ML.fn.fmap = function(f) {
    return new ML(this.xs.map(function(x) {
      return x.bind(f);
    }));
  };

  ML.fn.otherwise = function(x) {
    if (this.all()) {
      return this.xs;
    } else {
      return x;
    }
  };

  ML.fn.elsewise = function(x) {
    if (this.any()) {
      return new ML(this.xs).bind(id);
    } else {
      return x;
    }
  };

  ML.fn.diverge = function(x) {
    return this.elsewise(x);
  };

  ML.fn.elser = function(x) {
    if (this.any()) {
      return true;
    } else {
      return x;
    }
  };

  ML.fn.pick = function(f, g) {
    if (this.all()) {
      return new ML(this.xs).bind(f);
    } else {
      return g;
    }
  };

  ML.fn.select = function(f, g) {
    if (this.any()) {
      return new ML(this.xs).bind(f);
    } else {
      return g;
    }
  };

  ML.fn.choose = function(x, y) {
    if (this.all()) {
      return x;
    } else {
      return y;
    }
  };

  ML.fn.some = function() {
    return this.xs.filter(function(x) {
      return x.isSome;
    }).map(function(x) {
      return x.x;
    });
  };

  window.M = M;

  window.ML = ML;

}).call(this);
